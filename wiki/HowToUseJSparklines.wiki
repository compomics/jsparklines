#labels Featured,Phase-Implementation,Phase-Design
= Using JSparklines =

Using *JSparklines* is very easy and only requires a couple of lines of code. Below you will find simple code examples of how to use *JSparklines* in your project.

 * [#Single_Values Single Values]
 * [#Multiple_Values Multiple Values]
 * [#Multiple_Data_Series Multiple Data Series]
 * [#2D/3D_Data_Series 2D/3D Data Series]
 * [#Adding_Reference_Lines_and_Areas Adding Reference Lines and Areas]
 * [#Maven_Dependency Maven Dependency]

For the complete source code see the *JSparklines* demo found with the source code. 

To run the demo, double click the jar file or use: `java -jar jsparklines-X.Y.Z.jar`.

----

== Single Values ==

When displaying single numeric values in a column the simplest option is to use the JSparklinesBarChartTableCellRenderer. This renderer can be used on any table column containing most numeric objects as follows:

{{{
singleValuesJTable.getColumn("Fold Change").setCellRenderer(
    new JSparklinesBarChartTableCellRenderer(
        PlotOrientation.HORIZONTAL,             // orientation of the plot
        -5.0,                                   // lower range for the plot
        5.0,                                    // upper range for the plot
        negativeColor,                          // color to use for the negative values
        positiveColor));                        // color to use for the positive values
}}}


If the column only contains positive numbers it becomes even simpler:

{{{
singleValuesJTable.getColumn("Coverage").setCellRenderer(
    new JSparklinesBarChartTableCellRenderer(
        PlotOrientation.HORIZONTAL,             // orientation of the plot
        100.0,                                  // upper range for the plot
        positiveColor));                        // color to use for the positive values
}}}

This effectively sets the lower range to zero.

*Notes:*

 * *Note* that when using *JSparklines* in this way the underlaying values can be edited as normal by double clicking the cell to edit.
 * *Note* that it is possible to change the maximum and minimum values later by using the setMaxValue(...) and setMinValue(...) methods in the renderer.
 * *Note* that the underlying values can be shown by using the showNumbers(...) method.

[#Using_JSparklines Go to top of page]

----

== Multiple Values ==

When displaying multiple values in a single plot one has to use the JSparklinesTableCellRenderer. In this case the values to be plotted first has to be added to a JSparklineDataset, and this object then added to the table cell.

{{{
// add the data points to display to an arraylist
ArrayList<Double> dataA = new ArrayList<Double>();

dataA.add(new Double(2.4);
dataA.add(new Double(4.1);
...
dataA.add(new Double(1.3);

// create a JSparklineDataSeries 
JSparklinesDataSeries sparklineDataseriesA = new JSparklinesDataSeries(dataA, Color.DARK_GRAY, "Dataset A);

// add the data series to JSparklineDataset
ArrayList<JSparklinesDataSeries> sparkLineDataSeriesAll = new ArrayList<JSparklinesDataSeries>();
sparkLineDataSeriesAll.add(sparklineDataseriesA);

JSparklinesDataset dataset = new JSparklinesDataset(sparkLineDataSeriesAll);

// add the data to the table
((DefaultTableModel) multipleValuesJTable.getModel()).addRow(new Object[]{"Protein " + (j + 1), dataset});

// set the JSparklines renderer
multipleValuesJTable.getColumn("Change").setCellRenderer(
    new JSparklinesTableCellRenderer(
        JSparklinesTableCellRenderer.PlotType.lineChart,   // plot type
        PlotOrientation.VERTICAL,                          // plot orientation
        0.0,                                               // lower plot range
        maxValue));                                        // upper plot range
}}}

*Notes:*

 * *Note* that cells with *JSparklines* with multiple values are NOT editable, so please set columns using *JSparklines* non-editable.
 * *Note* that the chart type, the maximum and minimum values, the line width for line charts etc can be change later by using the and setPlotType(...), setMaxValue(...), setMinValue(...), setLineWidth(...), etc, methods in JSparklinesTableCellRenderer.

[#Using_JSparklines Go to top of page]

----

== Multiple Data Series ==

Displaying more than one data series is also very simple with *JSparklines*. Simply add multiple JSparklineDataSeries to the JSparklineDataset:

{{{
// add the data points for the first data series
ArrayList<Double> dataA = new ArrayList<Double>();

dataA.add(new Double(2.4);
dataA.add(new Double(4.1);
...
dataA.add(new Double(1.3);

// create a JSparklineDataSeries 
JSparklinesDataSeries sparklineDataseriesA = new JSparklinesDataSeries(dataA, Color.RED, "Dataset A");


// add the data points for the second data series
ArrayList<Double> dataB = new ArrayList<Double>();

dataB.add(new Double(2.4);
dataB.add(new Double(4.1);
...
dataB.add(new Double(1.3);

// create a JSparklineDataSeries 
JSparklinesDataSeries sparklineDataseriesB = new JSparklinesDataSeries(dataB, Color.BLUE, "Dataset B");


// add the data series to JSparklineDataset
ArrayList<JSparklinesDataSeries> sparkLineDataSeriesAll = new ArrayList<JSparklinesDataSeries>();
sparkLineDataSeriesAll.add(sparklineDataseriesA);
sparkLineDataSeriesAll.add(sparklineDataseriesB);

JSparklinesDataset dataset = new JSparklinesDataset(sparkLineDataSeriesAll);


// add the data to the table
((DefaultTableModel) multipleDataSeriesJTable.getModel()).addRow(new Object[]{"Protein " + (j + 1), dataset});


// set the JSparklines renderer
multipleDataSeriesJTable.getColumn("Change").setCellRenderer(
    new JSparklinesTableCellRenderer(
        JSparklinesTableCellRenderer.PlotType.barChart,    // plot type
        PlotOrientation.VERTICAL,                          // plot orientation
        0.0,                                               // lower plot range
        maxValue));                                        // upper plot range
}}}

*Notes:*

 * *Note* that cells with *JSparklines* with multiple values are NOT editable, so please set columns using *JSparklines* non-editable.
 * *Note* that the chart type, the maximum and minimum values, the line width for line charts etc can be change later by using the and setPlotType(...), setMaxValue(...), setMinValue(...), setLineWidth(...), etc, methods in JSparklinesTableCellRenderer.

[#Using_JSparklines Go to top of page]

----

= 2D/3D Data Series = 

When plotting 2D or 3D data use the JSparklines3dTableCellRenderer instead of the standard JSparklinesTableCellRenderer, and the JSparklines3dDataset instead of the JSparklinesDataset.

{{{
// add the 2D/3D data points to display to an arraylist
ArrayList<XYZDataPoint> dataA = new ArrayList<XYZDataPoint>();

dataA.add(new XYZDataPoint(2.4, 3.4, 2.7);
dataA.add(new XYZDataPoint(5.8, 2.7, 8.2);
...
dataA.add(new XYZDataPoint(6.2, 6.3, 1.1);

// create a JSparkline3dDataSeries
JSparklines3dDataSeries sparkline3dDataseriesA = new JSparklines3dDataSeries(dataA, Color.DARK_GRAY, "Dataset A);

// add the data series to JSparkline3dDataset
ArrayList<JSparklines3dDataSeries> sparkLine3dDataSeriesAll = new ArrayList<JSparklines3dDataSeries>();
sparkLine3dDataSeriesAll.add(sparkline3dDataseriesA);

JSparklines3dDataset dataset = new JSparklines3dDataset(sparkLine3dDataSeriesAll);

// add the data to the table
((DefaultTableModel) 3dValuesJTable.getModel()).addRow(new Object[]{"Protein " + (j + 1), dataset});

// set the JSparklines 3D renderer
3dValuesJTable.getColumn("Spread").setCellRenderer(new JSparklines3dTableCellRenderer( JSparklines3dTableCellRenderer.PlotType.bubblePlot,     // plot type
    -10d,                                               // x lower
    100d,                                               // x upper
    -10d,                                               // y lower
    110d));                                             // y upper
}}}

*Notes:*

 * *Note* that cells with *JSparklines* with 2D/3D values are NOT editable, so please set columns using *JSparklines* non-editable.
 * *Note* that the chart type, the maximum and minimum values, etc can be change later by using the and setPlotType(...), setMaxXValue(...), setMinXValue(...), etc, methods in JSparklines3dTableCellRenderer.

[#Using_JSparklines Go to top of page]

----

== Adding Reference Lines and Areas ==

Often it can be helpfull to add reference lines or areas to the charts to make them easier to compare. In *JSparklines* this is very easy:

{{{
    // get the JSparklines cell renderer
    JSparklinesTableCellRenderer tempRenderer = ((JSparklinesTableCellRenderer) multipleValuesJTable.getColumn("My Column").getCellRenderer());
    
    // add the reference
    tempRenderer.addReferenceArea(
        "My Reference",               // the reference label
        4,                            // the start value
        6,                            // the end value
        Color.LIGHT_GRAY,             // the color to use
        0.5f);                        // the alpha level

    // repaint the chart
    myJTable.revalidate();
    myJTable.repaint();
}}}

Removing the reference is equally straightforward:

{{{
    // get the JSparklines cell renderer
    JSparklinesTableCellRenderer tempRenderer = ((JSparklinesTableCellRenderer) multipleValuesJTable.getColumn("My Column").getCellRenderer());

    // remove the reference
    tempRenderer.removeReferenceArea("My Reference");
}}}

To add a line reference instead if an area reference, simply use the addReferenceLine(...) method instead.

*Note:* For 2D/3D plots use addXAxisReferenceLine(...), removeXAxisReferenceLine(...), etc, to add or remove reference lines and areas.


[#Using_JSparklines Go to top of page]

----

== Maven Dependency ==

*JSparklines* is available for use in Maven projects:

{{{
<dependency>
    <groupId>no.uib</groupId>
    <artifactId>jsparklines</artifactId>
    <version>X.Y.Z</version>
</dependency>
}}}
{{{
<repository>
    <id>genesis-maven2-repository</id>
    <name>Genesis maven2 repository</name>
    <url>http://genesis.UGent.be/maven2</url>
</repository>
}}}

Update the version number to latest released version.

[#Using_JSparklines Go to top of page]

----