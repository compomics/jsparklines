#labels Featured,Phase-Implementation,Phase-Design
= Using JSparklines =

Using *JSparklines* is very easy and only requires a couple of lines of code. Below you will find simple code examples of how to use *JSparklines* in your project.

 * [#Single_Values Single Values]
 * [#Multiple_Values Multiple Values]
 * [#Multiple_Data_Series Multiple Data Series]
 * [#Maven_Dependency Maven Dependency]

For the complete source code see the *JSparklines* demo found with the source code.

----

== Single Values ==

When displaying single numeric values (integers or doubles) in a column the simplest option is to use the JSparklinesBarChartTableCellRenderer. This renderer can be used on any table column containing Integer or Double objects as follows:

{{{
singleValuesJTable.getColumn("Fold Change").setCellRenderer(
    new JSparklinesBarChartTableCellRenderer(
        PlotOrientation.HORIZONTAL,             // orientation of the plot
        -5.0,                                   // lower range for the plot
        5.0,                                    // upper range for the plot
        negativeColor,                          // color to use for the negative values
        positiveColor));                        // color to use for the positive values
}}}


If the column only contains positive numbers it becomes even simpler:

{{{
singleValuesJTable.getColumn("Coverage").setCellRenderer(
    new JSparklinesBarChartTableCellRenderer(
        PlotOrientation.HORIZONTAL,             // orientation of the plot
        100.0,                                  // upper range for the plot
        positiveColor));                        // color to use for the positive values
}}}

This effectively sets the lower range to zero.

*Notes:*

 * *Note* that when using JSparklines in this way the underlaying values can be edited as normal by double clicking the cell to edit.
 * *Note* that it is possible to change the maximum and minium values later by using the setMaxValue(...) and setMinValue(...) methods.
 * *Note* that the underlying values can be shown by using the showNumbers(...) method.

[#Using_JSparklines Go to top of page]

----

== Multiple Values ==

When displaying multiple values in a single plot one has to use the JSparklinesTableCellRenderer. In this case the values to be plotted first has to be added to a JSparklineDataset, and this is the object added to the table cell.

{{{
// add the data points to display to an arraylist
ArrayList<Double> dataA = new ArrayList<Double>();

dataA.add(new Double(2.4);
dataA.add(new Double(4.1);
...
dataA.add(new Double(1.3);

// create a JSparklineDataSeries 
JSparklinesDataSeries sparklineDataseriesA = new JSparklinesDataSeries(dataA, Color.DARK_GRAY);

// add the data series to JSparklineDataset
ArrayList<JSparklinesDataSeries> sparkLineDataSeriesAll = new ArrayList<JSparklinesDataSeries>();
sparkLineDataSeriesAll.add(sparklineDataseriesA);

JSparklinesDataset dataset = new JSparklinesDataset(sparkLineDataSeriesAll);

// add the data to the table
((DefaultTableModel) multipleValuesJTable.getModel()).addRow(new Object[]{"Protein " + (j + 1), dataset});

// set the JSparklines renderer
multipleValuesJTable.getColumn("Change").setCellRenderer(
    new JSparklinesTableCellRenderer(
        JSparklinesTableCellRenderer.PlotType.lineChart,   // plot type
        PlotOrientation.VERTICAL,                          // plot orientation
        0.0,                                               // lower plot range
        maxValue));                                        // upper plot range
}}}

*Notes:*

 * *Note* that JSparklines with multiple values are NOT editable, so remember to set the columns as 'not editable' in the JTable.
 * *Note* that the maximum and minimum values, in addition to the line width for line charts and the plotting type can be change later by using the setMaxValue(...), setMinValue(...), setLineWidth(...) and setPlotType(...) methods.

[#Using_JSparklines Go to top of page]

----

== Multiple Data Series ==

Displaying more than one data series is also very simple with JSparklines. Simply add multiple JSparklineDataSeries to the JSparklineDataset:

{{{
// add the data points for the first data series
ArrayList<Double> dataA = new ArrayList<Double>();

dataA.add(new Double(2.4);
dataA.add(new Double(4.1);
...
dataA.add(new Double(1.3);

// create a JSparklineDataSeries 
JSparklinesDataSeries sparklineDataseriesA = new JSparklinesDataSeries(dataA, Color.RED);


// add the data points for the second data series
ArrayList<Double> dataB = new ArrayList<Double>();

dataB.add(new Double(2.4);
dataB.add(new Double(4.1);
...
dataB.add(new Double(1.3);

// create a JSparklineDataSeries 
JSparklinesDataSeries sparklineDataseriesB = new JSparklinesDataSeries(dataB, Color.BLUE);


// add the data series to JSparklineDataset
ArrayList<JSparklinesDataSeries> sparkLineDataSeriesAll = new ArrayList<JSparklinesDataSeries>();
sparkLineDataSeriesAll.add(sparklineDataseriesA);
sparkLineDataSeriesAll.add(sparklineDataseriesB);

JSparklinesDataset dataset = new JSparklinesDataset(sparkLineDataSeriesAll);


// add the data to the table
((DefaultTableModel) multipleDataSeriesJTable.getModel()).addRow(new Object[]{"Protein " + (j + 1), dataset});


// set the JSparklines renderer
multipleDataSeriesJTable.getColumn("Change").setCellRenderer(
    new JSparklinesTableCellRenderer(
        JSparklinesTableCellRenderer.PlotType.barChart,    // plot type
        PlotOrientation.VERTICAL,                          // plot orientation
        0.0,                                               // lower plot range
        maxValue));                                        // upper plot range
}}}

*Notes:*

 * *Note* that JSparklines with multiple values are NOT editable, so remember to set the columns as 'not editable' in the JTable.
 * *Note* that the maximum and minimum values, in addition to the line width for line charts and the plotting type can be change later by using the setMaxValue(...), setMinValue(...), setLineWidth(...) and setPlotType(...) methods.

[#Using_JSparklines Go to top of page]

----

== Maven Dependency ==

*JSparklines* is available for use in Maven projects:

{{{
<dependency>
    <groupId>no.uib</groupId>
    <artifactId>jsparklines</artifactId>
    <version>X.Y.Z</version>
</dependency>
}}}
{{{
<repository>
    <id>genesis-maven2-repository</id>
    <name>Genesis maven2 repository</name>
    <url>http://genesis.UGent.be/maven2</url>
</repository>
}}}

Update the version number to latest released version.

[#Using_JSparklines Go to top of page]

----